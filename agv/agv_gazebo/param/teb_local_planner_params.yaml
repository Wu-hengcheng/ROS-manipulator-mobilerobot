TebLocalPlannerROS:
   
 # Trajectory
  
 teb_autosize: True
 dt_ref: 0.3 #期望的轨迹时间分辨率
 dt_hysteresis: 0.03 #根据当前时间分辨率自动调整大小的滞后现象，通常约为。建议使用dt ref的10%。
 max_samples: 500
 global_plan_overwrite_orientation: True #覆盖由全局规划器提供的局部子目标的方向
 allow_init_with_backwards_motion: False
 max_global_plan_lookahead_dist: 3.0 #指定考虑优化的全局计划子集的最大长度
 global_plan_viapoint_sep: -1 #(double, default: -0.1 (disabled)) 如果为正值，则通过点（via-points ）从全局计划（路径跟踪模式）展开，该值确定参考路径的分辨率（沿着全局计划的每两个连续通过点之间的最小间隔，可以参考参数weight_viapoint来调整大小
 global_plan_prune_distance: 1
 exact_arc_length: False
 feasibility_check_no_poses: 5 #每个采样间隔的姿态可行性分析数，default：4
 publish_feedback: False #发布包含完整轨迹和动态障碍的列表的规划器反馈
    
 # Robot
         
 max_vel_x: 0.7
 max_vel_x_backwards: 0.7
 max_vel_y: 0.42
 max_vel_theta: 0.6
 acc_lim_x: 0.5
 acc_lim_y: 0.2
 acc_lim_theta: 0.5
 min_turning_radius: 0.0 # omni-drive robot (can turn on place!)

 footprint_model:
   type: "point"

 # GoalTolerance
    
 xy_goal_tolerance: 0.05 #目标位置的允许距离误差
 yaw_goal_tolerance: 0.01 #目标位置的允许角度误差
 free_goal_vel: False #去除目标速度的约束
 complete_global_plan: True
    
 # Obstacles
    
 min_obstacle_dist: 1 # This value must also include our robot radius, since footprint_model is set to "point".
 inflation_dist: 1.1  # 障碍物周围缓冲区(应大于min_obstacle_dist才能生效)
 include_costmap_obstacles: True #应否考虑到局部costmap的障碍
 costmap_obstacles_behind_robot_dist: 1.0 #考虑后面n米内的障碍物
 obstacle_poses_affected: 15 #为了保持距离，每个障碍物位置都与轨道上最近的位置相连。
 costmap_converter_plugin: ""
#定义插件名称，用于将costmap的单元格转换成点/线/多边形。若设置为空字符，则视为禁用转换，将所有点视为点障碍
 costmap_converter_spin_thread: True  #如果为true，则costmap转换器将以不同的线程调用其回调队列, default:true
 costmap_converter_rate: 5 #定义costmap_converter插件处理当前costmap的频率（该值不高于costmap更新率


 # Optimization
    
 no_inner_iterations: 5 #在每个内循环迭代中调用的实际求解器迭代次数
 no_outer_iterations: 4 #在每个外循环迭代中调用的实际求解器迭代次数
 optimization_activate: True 
 optimization_verbose: False
 penalty_epsilon: 0.1 #为硬约束近似的惩罚函数添加一个小的安全范围
 obstacle_cost_exponent: 4
 weight_max_vel_x: 2 #满足最大允许平移速度的优化权重
 weight_max_vel_y: 2
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 weight_acc_lim_y: 1
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1  #运动学的优化权重 # WE HAVE A HOLONOMIC ROBOT, JUST ADD A SMALL PENALTY
 weight_kinematics_forward_drive: 1 #强制机器人仅选择正向（正的平移速度）的优化权重
 weight_kinematics_turning_radius: 1 #采用最小转向半径的优化权重
 weight_optimaltime: 1 # must be > 0 #根据转换/执行时间对轨迹进行收缩的优化权重
 weight_shortest_path: 0
 weight_obstacle: 50 #保持与障碍物的最小距离的优化权重 default: 50.0
 weight_inflation: 0.2 #膨胀半径权重
 weight_dynamic_obstacle: 10
 weight_dynamic_obstacle_inflation: 0.2
 weight_viapoint: 1 #跟踪全局路径的权重
 weight_adapt_factor: 2 #迭代地增加某些权重

 # Homotopy Class Planner

 enable_homotopy_class_planning: True #激活并行规划（因为一次优化多个轨迹，占用更多的CPU资源
 enable_multithreading: True #激活多个线程，以便在不同的线程中规划每个轨迹
 max_number_classes: 4 #考虑到的不同轨迹的最大数量
 selection_cost_hysteresis: 1.0  #轨迹成本
 selection_prefer_initial_plan: 0.9
 selection_obst_cost_scale: 1.0 #障碍物成本
 selection_alternative_time_cost: False #如果为真，时间成本(时间差平方和)被总转移时间(时间差和)所替代。
 
 roadmap_graph_no_samples: 15 #指定为创建路线图而生成的样本数
 roadmap_graph_area_width: 5 #指定该区域的宽度
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.5 #（0.2 < value <= 1）缩放用于区分同伦类的内部参数（H-signature）。
#警告：只能减少此参数，如果在局部costmap中遇到太多障碍物的情况，请勿选择极低值，否则无法将障碍物彼此区分开线缩放用于区分同伦类的内部参数（H-signature）。
 h_signature_threshold: 0.1  #如果实部和复部的差都低于规定的阈值，则假定两个h签名相等。
 obstacle_heading_threshold: 0.45 #指定障碍标头和目标标头之间的标量积的值，以便将(障碍)考虑到勘探中
 switching_blocking_period: 0.0
 viapoints_all_candidates: True
 delete_detours_backwards: True
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: False #可视化创建的图形，用于探索不同的轨迹（在rviz中检查标记消息）
 visualize_with_time_as_z_axis_scale: False

# Recovery
 
 shrink_horizon_backup: True
 shrink_horizon_min_duration: 10
 oscillation_recovery: True
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10
