<?xml version="1.0"?>

<!--
	all the gazebo-specific aspects of the robot

  http://gazebosim.org/tutorials/?tut=ros_urdf
  
  http://gazebosim.org/tutorials?tut=ros_gzplugins&cat=connect_ros

        gazebo material

  https://github.com/osrf/gazebo/blob/master/media/materials/scripts/gazebo.material
-->

<robot xmlns:xacro="http://www.ros.org/wiki/xacro/#interface"
       xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor"
       xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller"
       xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface">
  
  <!-- ros_control plugin -->
  <gazebo>
    <plugin name="gazebo_ros_control" 
            filename="libgazebo_ros_control.so">
      <robotNamespace>/agv</robotNamespace>
      <!--<robotParam>/robot_description</robotParam>-->
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>


  <!--
    The plugin broadcasts a body's pose and rates through ROS nav_msgs::Odometry message.
    The plugin broadcasts pose and rate of a body named "base_Link" over ROS topic name "/odom".
  -->
  <gazebo>
    <plugin name="ground_truth" 
            filename="libgazebo_ros_p3d.so">
      <frameName>map</frameName>
      <bodyName>base_Link</bodyName>
      <topicName>gnd_truth</topicName>
      <updateRate>30.0</updateRate>
      <gaussianNoise>0.0</gaussianNoise>
    </plugin>
  </gazebo>


  <!-- Gazebo Link properties -->
  <gazebo reference="base_footprint">
    <material>Gazebo/Orange</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <gazebo reference="base_Link">
    <material>Gazebo/Orange</material>
    <!--turnGravityOff>false</turnGravityOff-->
  </gazebo>

  <gazebo reference="fl_Link">
    <material>Gazebo/Black</material>
    <!--turnGravityOff>false</turnGravityOff-->
  </gazebo>

  <gazebo reference="bl_Link">
    <material>Gazebo/Black</material>
    <!--turnGravityOff>false</turnGravityOff-->
  </gazebo>

  <gazebo reference="fr_Link">
    <material>Gazebo/Black</material>
    <!--turnGravityOff>false</turnGravityOff-->
  </gazebo>

  <gazebo reference="br_Link">
    <material>Gazebo/Black</material>
    <!--turnGravityOff>false</turnGravityOff-->
  </gazebo>

  <gazebo>
    <plugin name="mecanum_controller" filename="libgazebo_ros_planar_move.so">
      <robotNamespace>/</robotNamespace>
      <commandTopic>/cmd_vel</commandTopic>
      <odometryTopic>/odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <leftFrontJoint>fl_joint</leftFrontJoint>
      <rightFrontJoint>fr_joint</rightFrontJoint>
      <leftRearJoint>bl_joint</leftRearJoint>
      <rightRearJoint>br_joint</rightRearJoint>
      <odometryRate>20.0</odometryRate>
      <robotBaseFrame>base_footprint</robotBaseFrame>
    </plugin>
  </gazebo>

<!--Skid Steering Drive

Description: model plugin that provides a basic controller for skid steering drive robots in Gazebo (Pioneer 3AT for instance).-->

  <!--gazebo>
    <plugin name="skid_steer_drive_controller" 
    		    filename="libgazebo_ros_skid_steer_drive.so">

      <robotNamespace>/</robotNamespace>
    		  
      <alwaysOn>true</alwaysOn>
      <updateRate>100</updateRate>
      <leftFrontJoint>fl_joint</leftFrontJoint>
      <rightFrontJoint>fr_joint</rightFrontJoint>
      <leftRearJoint>bl_joint</leftRearJoint>
      <rightRearJoint>br_joint</rightRearJoint>
      <wheelSeparation>0.68</wheelSeparation>
      <wheelDiameter>0.2</wheelDiameter>
      <torque>100</torque>
      <MaxForce>10000</MaxForce>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>-->
      
      <!--<legacyMode>false</legacyMode>-->
      
      <!--<rosDebugLevel>Debug</rosDebugLevel>-->
      <!--<publishWheelTF>true</publishWheelTF>-->
      <!--<publishWheelJointState>true</publishWheelJointState>-->
      <!--<wheelAcceleration>5</wheelAcceleration>-->
      <!--wheelTorque>2000</wheelTorque>
      <publishTf>1</publishTf>
      <broadcastTF>1</broadcastTF>
      <covariance_x>0.0001</covariance_x>
      <covariance_y>0.0001</covariance_y>
      <covariance_yaw>0.01</covariance_yaw-->
      <!--<odometrySource>encoder</odometrySource>-->
    <!--/plugin>
  </gazebo-->
  <!--gazebo>
    <plugin name="differential_drive_controller_1" filename="libgazebo_ros_diff_drive.so">
      <legacyMode>false</legacyMode>
      <alwaysOn>true</alwaysOn>
      <updateRate>10</updateRate>
      <leftJoint>fl_joint</leftJoint>
      <rightJoint>fr_joint</rightJoint>
      <wheelSeparation>1.36</wheelSeparation>
      <wheelDiameter>0.2</wheelDiameter>
      <wheelAcceleration>0</wheelAcceleration>
      <torque>10</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="differential_drive_controller_2" filename="libgazebo_ros_diff_drive.so">
      <legacyMode>false</legacyMode>
      <alwaysOn>true</alwaysOn>
      <updateRate>10</updateRate>
      <leftJoint>bl_joint</leftJoint>
      <rightJoint>br_joint</rightJoint>
      <wheelSeparation>1.36</wheelSeparation>
      <wheelDiameter>0.2</wheelDiameter>
      <wheelAcceleration>0</wheelAcceleration>
      <torque>10</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>
    </plugin>
  </gazebo-->


<!-- camera -->
  <gazebo reference="camera_link">
    <mu1>0.2</mu1>
    <mu2>0.2</mu2>
    <material>Gazebo/Green</material>
    <sensor type="camera" 
            name="camera_node">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" 
              filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>/camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

  <!-- hokuyo -->
  <gazebo reference="hokuyo_link">
    <!-- Don't use type="gpu_ray" -->
    <material>Gazebo/Blue</material>
    <turnGravityOff>false</turnGravityOff>
    <sensor type="ray"
            name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      
      <plugin name="gazebo_ros_head_hokuyo_controller" 
              filename="libgazebo_ros_laser.so">
        <topicName>/scan</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <!-- IMU plugin -->
  <!--<gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>base_footprint</bodyName>
      <topicName>imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>20.0</updateRate>
    </plugin>
  </gazebo>-->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <material>Gazebo/Red</material>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

</robot>
